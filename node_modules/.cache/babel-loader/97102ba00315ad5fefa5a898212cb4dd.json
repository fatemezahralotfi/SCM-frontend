{"ast":null,"code":"/*\n * Copyright 2012-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n'use strict';\n\nvar interceptor, UrlBuilder;\ninterceptor = require('../interceptor');\nUrlBuilder = require('../UrlBuilder');\n\nfunction startsWith(str, prefix) {\n  return str.indexOf(prefix) === 0;\n}\n\nfunction endsWith(str, suffix) {\n  return str.lastIndexOf(suffix) + suffix.length === str.length;\n}\n/**\n * Prefixes the request path with a common value.\n *\n * @param {Client} [client] client to wrap\n * @param {number} [config.prefix] path prefix\n *\n * @returns {Client}\n */\n\n\nmodule.exports = interceptor({\n  request: function (request, config) {\n    var path;\n\n    if (config.prefix && !new UrlBuilder(request.path).isFullyQualified()) {\n      path = config.prefix;\n\n      if (request.path) {\n        if (!endsWith(path, '/') && !startsWith(request.path, '/')) {\n          // add missing '/' between path sections\n          path += '/';\n        }\n\n        path += request.path;\n      }\n\n      request.path = path;\n    }\n\n    return request;\n  }\n});","map":{"version":3,"sources":["/Users/fatemezahralotfi/IdeaProjects/SCM-frontend/node_modules/rest/interceptor/pathPrefix.js"],"names":["interceptor","UrlBuilder","require","startsWith","str","prefix","indexOf","endsWith","suffix","lastIndexOf","length","module","exports","request","config","path","isFullyQualified"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,WAAJ,EAAiBC,UAAjB;AAEAD,WAAW,GAAGE,OAAO,CAAC,gBAAD,CAArB;AACAD,UAAU,GAAGC,OAAO,CAAC,eAAD,CAApB;;AAEA,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,MAAzB,EAAiC;AAChC,SAAOD,GAAG,CAACE,OAAJ,CAAYD,MAAZ,MAAwB,CAA/B;AACA;;AAED,SAASE,QAAT,CAAkBH,GAAlB,EAAuBI,MAAvB,EAA+B;AAC9B,SAAOJ,GAAG,CAACK,WAAJ,CAAgBD,MAAhB,IAA0BA,MAAM,CAACE,MAAjC,KAA4CN,GAAG,CAACM,MAAvD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiBZ,WAAW,CAAC;AAC5Ba,EAAAA,OAAO,EAAE,UAAUA,OAAV,EAAmBC,MAAnB,EAA2B;AACnC,QAAIC,IAAJ;;AAEA,QAAID,MAAM,CAACT,MAAP,IAAiB,CAAE,IAAIJ,UAAJ,CAAeY,OAAO,CAACE,IAAvB,EAA6BC,gBAA7B,EAAvB,EAAyE;AACxED,MAAAA,IAAI,GAAGD,MAAM,CAACT,MAAd;;AACA,UAAIQ,OAAO,CAACE,IAAZ,EAAkB;AACjB,YAAI,CAACR,QAAQ,CAACQ,IAAD,EAAO,GAAP,CAAT,IAAwB,CAACZ,UAAU,CAACU,OAAO,CAACE,IAAT,EAAe,GAAf,CAAvC,EAA4D;AAC3D;AACAA,UAAAA,IAAI,IAAI,GAAR;AACA;;AACDA,QAAAA,IAAI,IAAIF,OAAO,CAACE,IAAhB;AACA;;AACDF,MAAAA,OAAO,CAACE,IAAR,GAAeA,IAAf;AACA;;AAED,WAAOF,OAAP;AACA;AAjB2B,CAAD,CAA5B","sourcesContent":["/*\n * Copyright 2012-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n'use strict';\n\nvar interceptor, UrlBuilder;\n\ninterceptor = require('../interceptor');\nUrlBuilder = require('../UrlBuilder');\n\nfunction startsWith(str, prefix) {\n\treturn str.indexOf(prefix) === 0;\n}\n\nfunction endsWith(str, suffix) {\n\treturn str.lastIndexOf(suffix) + suffix.length === str.length;\n}\n\n/**\n * Prefixes the request path with a common value.\n *\n * @param {Client} [client] client to wrap\n * @param {number} [config.prefix] path prefix\n *\n * @returns {Client}\n */\nmodule.exports = interceptor({\n\trequest: function (request, config) {\n\t\tvar path;\n\n\t\tif (config.prefix && !(new UrlBuilder(request.path).isFullyQualified())) {\n\t\t\tpath = config.prefix;\n\t\t\tif (request.path) {\n\t\t\t\tif (!endsWith(path, '/') && !startsWith(request.path, '/')) {\n\t\t\t\t\t// add missing '/' between path sections\n\t\t\t\t\tpath += '/';\n\t\t\t\t}\n\t\t\t\tpath += request.path;\n\t\t\t}\n\t\t\trequest.path = path;\n\t\t}\n\n\t\treturn request;\n\t}\n});\n"]},"metadata":{},"sourceType":"script"}