{"ast":null,"code":"/*\n * Copyright 2012-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n'use strict';\n\nvar mixin, xWWWFormURLEncoder, origin, urlRE, absoluteUrlRE, fullyQualifiedUrlRE;\nmixin = require('./util/mixin');\nxWWWFormURLEncoder = require('./mime/type/application/x-www-form-urlencoded');\nurlRE = /([a-z][a-z0-9\\+\\-\\.]*:)\\/\\/([^@]+@)?(([^:\\/]+)(:([0-9]+))?)?(\\/[^?#]*)?(\\?[^#]*)?(#\\S*)?/i;\nabsoluteUrlRE = /^([a-z][a-z0-9\\-\\+\\.]*:\\/\\/|\\/)/i;\nfullyQualifiedUrlRE = /([a-z][a-z0-9\\+\\-\\.]*:)\\/\\/([^@]+@)?(([^:\\/]+)(:([0-9]+))?)?\\//i;\n/**\n * Apply params to the template to create a URL.\n *\n * Parameters that are not applied directly to the template, are appended\n * to the URL as query string parameters.\n *\n * @param {string} template the URI template\n * @param {Object} params parameters to apply to the template\n * @return {string} the resulting URL\n */\n\nfunction buildUrl(template, params) {\n  // internal builder to convert template with params.\n  var url, name, queryStringParams, queryString, re;\n  url = template;\n  queryStringParams = {};\n\n  if (params) {\n    for (name in params) {\n      /*jshint forin:false */\n      re = new RegExp('\\\\{' + name + '\\\\}');\n\n      if (re.test(url)) {\n        url = url.replace(re, encodeURIComponent(params[name]), 'g');\n      } else {\n        queryStringParams[name] = params[name];\n      }\n    }\n\n    queryString = xWWWFormURLEncoder.write(queryStringParams);\n\n    if (queryString) {\n      url += url.indexOf('?') === -1 ? '?' : '&';\n      url += queryString;\n    }\n  }\n\n  return url;\n}\n\nfunction startsWith(str, test) {\n  return str.indexOf(test) === 0;\n}\n/**\n * Create a new URL Builder\n *\n * @param {string|UrlBuilder} template the base template to build from, may be another UrlBuilder\n * @param {Object} [params] base parameters\n * @constructor\n */\n\n\nfunction UrlBuilder(template, params) {\n  if (!(this instanceof UrlBuilder)) {\n    // invoke as a constructor\n    return new UrlBuilder(template, params);\n  }\n\n  if (template instanceof UrlBuilder) {\n    this._template = template.template;\n    this._params = mixin({}, this._params, params);\n  } else {\n    this._template = (template || '').toString();\n    this._params = params || {};\n  }\n}\n\nUrlBuilder.prototype = {\n  /**\n   * Create a new UrlBuilder instance that extends the current builder.\n   * The current builder is unmodified.\n   *\n   * @param {string} [template] URL template to append to the current template\n   * @param {Object} [params] params to combine with current params.  New params override existing params\n   * @return {UrlBuilder} the new builder\n   */\n  append: function (template, params) {\n    // TODO consider query strings and fragments\n    return new UrlBuilder(this._template + template, mixin({}, this._params, params));\n  },\n\n  /**\n   * Create a new UrlBuilder with a fully qualified URL based on the\n   * window's location or base href and the current templates relative URL.\n   *\n   * Path variables are preserved.\n   *\n   * *Browser only*\n   *\n   * @return {UrlBuilder} the fully qualified URL template\n   */\n  fullyQualify: function () {\n    if (typeof location === 'undefined') {\n      return this;\n    }\n\n    if (this.isFullyQualified()) {\n      return this;\n    }\n\n    var template = this._template;\n\n    if (startsWith(template, '//')) {\n      template = origin.protocol + template;\n    } else if (startsWith(template, '/')) {\n      template = origin.origin + template;\n    } else if (!this.isAbsolute()) {\n      template = origin.origin + origin.pathname.substring(0, origin.pathname.lastIndexOf('/') + 1);\n    }\n\n    if (template.indexOf('/', 8) === -1) {\n      // default the pathname to '/'\n      template = template + '/';\n    }\n\n    return new UrlBuilder(template, this._params);\n  },\n\n  /**\n   * True if the URL is absolute\n   *\n   * @return {boolean}\n   */\n  isAbsolute: function () {\n    return absoluteUrlRE.test(this.build());\n  },\n\n  /**\n   * True if the URL is fully qualified\n   *\n   * @return {boolean}\n   */\n  isFullyQualified: function () {\n    return fullyQualifiedUrlRE.test(this.build());\n  },\n\n  /**\n   * True if the URL is cross origin. The protocol, host and port must not be\n   * the same in order to be cross origin,\n   *\n   * @return {boolean}\n   */\n  isCrossOrigin: function () {\n    if (!origin) {\n      return true;\n    }\n\n    var url = this.parts();\n    return url.protocol !== origin.protocol || url.hostname !== origin.hostname || url.port !== origin.port;\n  },\n\n  /**\n   * Split a URL into its consituent parts following the naming convention of\n   * 'window.location'. One difference is that the port will contain the\n   * protocol default if not specified.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/DOM/window.location\n   *\n   * @returns {Object} a 'window.location'-like object\n   */\n  parts: function () {\n    /*jshint maxcomplexity:20 */\n    var url, parts;\n    url = this.fullyQualify().build().match(urlRE);\n    parts = {\n      href: url[0],\n      protocol: url[1],\n      host: url[3] || '',\n      hostname: url[4] || '',\n      port: url[6],\n      pathname: url[7] || '',\n      search: url[8] || '',\n      hash: url[9] || ''\n    };\n    parts.origin = parts.protocol + '//' + parts.host;\n    parts.port = parts.port || (parts.protocol === 'https:' ? '443' : parts.protocol === 'http:' ? '80' : '');\n    return parts;\n  },\n\n  /**\n   * Expand the template replacing path variables with parameters\n   *\n   * @param {Object} [params] params to combine with current params.  New params override existing params\n   * @return {string} the expanded URL\n   */\n  build: function (params) {\n    return buildUrl(this._template, mixin({}, this._params, params));\n  },\n\n  /**\n   * @see build\n   */\n  toString: function () {\n    return this.build();\n  }\n};\norigin = typeof location !== 'undefined' ? new UrlBuilder(location.href).parts() : void 0;\nmodule.exports = UrlBuilder;","map":{"version":3,"sources":["/Users/fatemezahralotfi/IdeaProjects/SCM-frontend/node_modules/rest/UrlBuilder.js"],"names":["mixin","xWWWFormURLEncoder","origin","urlRE","absoluteUrlRE","fullyQualifiedUrlRE","require","buildUrl","template","params","url","name","queryStringParams","queryString","re","RegExp","test","replace","encodeURIComponent","write","indexOf","startsWith","str","UrlBuilder","_template","_params","toString","prototype","append","fullyQualify","location","isFullyQualified","protocol","isAbsolute","pathname","substring","lastIndexOf","build","isCrossOrigin","parts","hostname","port","match","href","host","search","hash","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright 2012-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n'use strict';\n\nvar mixin, xWWWFormURLEncoder, origin, urlRE, absoluteUrlRE, fullyQualifiedUrlRE;\n\nmixin = require('./util/mixin');\nxWWWFormURLEncoder = require('./mime/type/application/x-www-form-urlencoded');\n\nurlRE = /([a-z][a-z0-9\\+\\-\\.]*:)\\/\\/([^@]+@)?(([^:\\/]+)(:([0-9]+))?)?(\\/[^?#]*)?(\\?[^#]*)?(#\\S*)?/i;\nabsoluteUrlRE = /^([a-z][a-z0-9\\-\\+\\.]*:\\/\\/|\\/)/i;\nfullyQualifiedUrlRE = /([a-z][a-z0-9\\+\\-\\.]*:)\\/\\/([^@]+@)?(([^:\\/]+)(:([0-9]+))?)?\\//i;\n\n/**\n * Apply params to the template to create a URL.\n *\n * Parameters that are not applied directly to the template, are appended\n * to the URL as query string parameters.\n *\n * @param {string} template the URI template\n * @param {Object} params parameters to apply to the template\n * @return {string} the resulting URL\n */\nfunction buildUrl(template, params) {\n\t// internal builder to convert template with params.\n\tvar url, name, queryStringParams, queryString, re;\n\n\turl = template;\n\tqueryStringParams = {};\n\n\tif (params) {\n\t\tfor (name in params) {\n\t\t\t/*jshint forin:false */\n\t\t\tre = new RegExp('\\\\{' + name + '\\\\}');\n\t\t\tif (re.test(url)) {\n\t\t\t\turl = url.replace(re, encodeURIComponent(params[name]), 'g');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tqueryStringParams[name] = params[name];\n\t\t\t}\n\t\t}\n\n\t\tqueryString = xWWWFormURLEncoder.write(queryStringParams);\n\t\tif (queryString) {\n\t\t\turl += url.indexOf('?') === -1 ? '?' : '&';\n\t\t\turl += queryString;\n\t\t}\n\t}\n\treturn url;\n}\n\nfunction startsWith(str, test) {\n\treturn str.indexOf(test) === 0;\n}\n\n/**\n * Create a new URL Builder\n *\n * @param {string|UrlBuilder} template the base template to build from, may be another UrlBuilder\n * @param {Object} [params] base parameters\n * @constructor\n */\nfunction UrlBuilder(template, params) {\n\tif (!(this instanceof UrlBuilder)) {\n\t\t// invoke as a constructor\n\t\treturn new UrlBuilder(template, params);\n\t}\n\n\tif (template instanceof UrlBuilder) {\n\t\tthis._template = template.template;\n\t\tthis._params = mixin({}, this._params, params);\n\t}\n\telse {\n\t\tthis._template = (template || '').toString();\n\t\tthis._params = params || {};\n\t}\n}\n\nUrlBuilder.prototype = {\n\n\t/**\n\t * Create a new UrlBuilder instance that extends the current builder.\n\t * The current builder is unmodified.\n\t *\n\t * @param {string} [template] URL template to append to the current template\n\t * @param {Object} [params] params to combine with current params.  New params override existing params\n\t * @return {UrlBuilder} the new builder\n\t */\n\tappend: function (template,  params) {\n\t\t// TODO consider query strings and fragments\n\t\treturn new UrlBuilder(this._template + template, mixin({}, this._params, params));\n\t},\n\n\t/**\n\t * Create a new UrlBuilder with a fully qualified URL based on the\n\t * window's location or base href and the current templates relative URL.\n\t *\n\t * Path variables are preserved.\n\t *\n\t * *Browser only*\n\t *\n\t * @return {UrlBuilder} the fully qualified URL template\n\t */\n\tfullyQualify: function () {\n\t\tif (typeof location === 'undefined') { return this; }\n\t\tif (this.isFullyQualified()) { return this; }\n\n\t\tvar template = this._template;\n\n\t\tif (startsWith(template, '//')) {\n\t\t\ttemplate = origin.protocol + template;\n\t\t}\n\t\telse if (startsWith(template, '/')) {\n\t\t\ttemplate = origin.origin + template;\n\t\t}\n\t\telse if (!this.isAbsolute()) {\n\t\t\ttemplate = origin.origin + origin.pathname.substring(0, origin.pathname.lastIndexOf('/') + 1);\n\t\t}\n\n\t\tif (template.indexOf('/', 8) === -1) {\n\t\t\t// default the pathname to '/'\n\t\t\ttemplate = template + '/';\n\t\t}\n\n\t\treturn new UrlBuilder(template, this._params);\n\t},\n\n\t/**\n\t * True if the URL is absolute\n\t *\n\t * @return {boolean}\n\t */\n\tisAbsolute: function () {\n\t\treturn absoluteUrlRE.test(this.build());\n\t},\n\n\t/**\n\t * True if the URL is fully qualified\n\t *\n\t * @return {boolean}\n\t */\n\tisFullyQualified: function () {\n\t\treturn fullyQualifiedUrlRE.test(this.build());\n\t},\n\n\t/**\n\t * True if the URL is cross origin. The protocol, host and port must not be\n\t * the same in order to be cross origin,\n\t *\n\t * @return {boolean}\n\t */\n\tisCrossOrigin: function () {\n\t\tif (!origin) {\n\t\t\treturn true;\n\t\t}\n\t\tvar url = this.parts();\n\t\treturn url.protocol !== origin.protocol ||\n\t\t       url.hostname !== origin.hostname ||\n\t\t       url.port !== origin.port;\n\t},\n\n\t/**\n\t * Split a URL into its consituent parts following the naming convention of\n\t * 'window.location'. One difference is that the port will contain the\n\t * protocol default if not specified.\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/DOM/window.location\n\t *\n\t * @returns {Object} a 'window.location'-like object\n\t */\n\tparts: function () {\n\t\t/*jshint maxcomplexity:20 */\n\t\tvar url, parts;\n\t\turl = this.fullyQualify().build().match(urlRE);\n\t\tparts = {\n\t\t\thref: url[0],\n\t\t\tprotocol: url[1],\n\t\t\thost: url[3] || '',\n\t\t\thostname: url[4] || '',\n\t\t\tport: url[6],\n\t\t\tpathname: url[7] || '',\n\t\t\tsearch: url[8] || '',\n\t\t\thash: url[9] || ''\n\t\t};\n\t\tparts.origin = parts.protocol + '//' + parts.host;\n\t\tparts.port = parts.port || (parts.protocol === 'https:' ? '443' : parts.protocol === 'http:' ? '80' : '');\n\t\treturn parts;\n\t},\n\n\t/**\n\t * Expand the template replacing path variables with parameters\n\t *\n\t * @param {Object} [params] params to combine with current params.  New params override existing params\n\t * @return {string} the expanded URL\n\t */\n\tbuild: function (params) {\n\t\treturn buildUrl(this._template, mixin({}, this._params, params));\n\t},\n\n\t/**\n\t * @see build\n\t */\n\ttoString: function () {\n\t\treturn this.build();\n\t}\n\n};\n\norigin = typeof location !== 'undefined' ? new UrlBuilder(location.href).parts() : void 0;\n\nmodule.exports = UrlBuilder;\n"]},"metadata":{},"sourceType":"script"}